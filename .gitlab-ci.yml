# GitLab CI/CD configuration for Web Whisper macOS builds
# Windows builds are handled separately via GitHub Actions

stages:
  - build
  - package
  - release

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  PNPM_CACHE_DIR: $CI_PROJECT_DIR/.pnpm-store
  RUST_BACKTRACE: 1
  PYTHON_VERSION: "3.11"

# Cache configuration
.cache-template: &cache-config
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cargo/
      - .pnpm-store/
      - target/
      - frontend/node_modules/
      - backend/venv/

# Common setup for all platforms
.setup-base: &setup-base
  before_script:
    - echo "Setting up build environment..."
    - echo "Platform:" $(uname -a)
    - echo "CI Runner tags:" $CI_RUNNER_TAGS


# NOTE: Windows builds are handled separately
# See docs/windows-build.md for manual Windows build instructions

# Build for Windows (disabled - use manual process)
# See docs/windows-build.md for instructions

# Build for macOS
build-macos:
  stage: build
  tags:
    - macos
    - shared
  <<: *cache-config
  <<: *setup-base
  before_script:
    - !reference [.setup-base, before_script]
    - echo "Setting up macOS build environment..."
    
    # Install Homebrew if not present
    - |
      if ! command -v brew &> /dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi
    
    # Install dependencies
    - |
      if ! command -v node &> /dev/null; then
        echo "Installing Node.js..."
        brew install node@20
      fi
    
    - |
      if ! command -v pnpm &> /dev/null; then
        echo "Installing pnpm..."
        npm install -g pnpm@8
      fi
    
    - |
      if ! command -v rustc &> /dev/null; then
        echo "Installing Rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
      fi
    
    # Install Python via pyenv if available, otherwise use system
    - |
      if command -v pyenv &> /dev/null; then
        echo "Using pyenv for Python management..."
        pyenv install 3.11.6 --skip-existing
        pyenv virtualenv 3.11.6 web-whisper-ci || true
        pyenv local web-whisper-ci
      else
        echo "Installing Python via Homebrew..."
        brew install python@3.11
      fi
    
    - rustup target add universal-apple-darwin
    
  script:
    # Setup Python environment
    - echo "Setting up Python backend..."
    - cd backend
    - |
      if command -v pyenv &> /dev/null; then
        pyenv activate web-whisper-ci
        pip install --upgrade pip
      else
        python3.11 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
      fi
    - pip install -r requirements.txt
    - cd ..
    
    # Build frontend
    - echo "Building Tauri application..."
    - cd frontend
    - pnpm install --frozen-lockfile
    - pnpm tauri build --target universal-apple-darwin
    
  artifacts:
    name: "web-whisper-macos-$CI_COMMIT_SHORT_SHA"
    paths:
      - frontend/src-tauri/target/universal-apple-darwin/release/bundle/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG
  allow_failure: true  # Allow failure if macOS runner not available


# Package macOS build (Windows artifacts added manually)
package:
  stage: package
  image: alpine:latest
  dependencies:
    - build-macos
  before_script:
    - apk add --no-cache zip file
  script:
    - mkdir -p releases
    - echo "Creating macOS release package..."
    
    # Note: Windows builds should be added manually to releases/ directory
    # before running this job
    
    # Package macOS builds
    - |
      if [ -d "frontend/src-tauri/target/universal-apple-darwin/release/bundle" ]; then
        echo "Packaging macOS build..."
        cd frontend/src-tauri/target/universal-apple-darwin/release/bundle
        
        # Create DMG package
        if [ -d "dmg" ]; then
          cd dmg
          zip -r ../../../../../../releases/web-whisper-macos-dmg-$CI_COMMIT_SHORT_SHA.zip *.dmg
          cd ..
        fi
        
        # Create App bundle package
        if [ -d "macos" ]; then
          cd macos
          zip -r ../../../../../../releases/web-whisper-macos-app-$CI_COMMIT_SHORT_SHA.zip *.app
          cd ..
        fi
        
        cd ../../../../../
      else
        echo "macOS build not found"
      fi
    
    # List created packages
    - echo "Created packages:"
    - ls -la releases/
    - file releases/* || true
    
  artifacts:
    name: "web-whisper-all-platforms-$CI_COMMIT_SHORT_SHA"
    paths:
      - releases/
    expire_in: 1 month
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"  
    - if: $CI_COMMIT_TAG

# Create release for tags
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - package
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
    - echo "Available artifacts:"
    - ls -la releases/ || echo "No releases found"
  release:
    tag_name: '$CI_COMMIT_TAG'
    name: 'Web Whisper $CI_COMMIT_TAG'
    description: |
      ## Web Whisper $CI_COMMIT_TAG

      üé§ Cross-platform speech-to-text application powered by OpenAI Whisper AI with GPU acceleration.

      ### üöÄ Features
      - **Apple Silicon (MLX + Metal)**: Native GPU acceleration for M1/M2/M3 Macs
      - **Windows NVIDIA CUDA**: GPU acceleration for compatible graphics cards
      - **Smart File Saving**: Automatic text export with error recovery
      - **Drag & Drop Interface**: Simple audio file processing
      - **High Accuracy**: Whisper Large-v3 model for superior transcription
      - **Multiple Formats**: MP3, WAV, M4A, FLAC, MP4, AVI, MOV, MKV support

      ### üì¶ Downloads
      Choose the package for your platform:

      - **Windows 64-bit MSI**: Recommended installer for Windows 10/11
      - **Windows 64-bit EXE**: Alternative installer format
      - **macOS Universal DMG**: Native app for Apple Silicon + Intel Macs
      - **macOS App Bundle**: Direct .app bundle for advanced users

      ### üõ† Installation
      - **Windows**: Download MSI/EXE, run installer, follow prompts
      - **macOS**: Download DMG, open and drag to Applications folder

      ### ‚ö° Performance
      - GPU acceleration automatically detected and enabled
      - Offline processing - no internet required after setup
      - Optimized for modern hardware architectures

      Built with ‚ù§Ô∏è using Tauri, Rust, TypeScript, and Python.
    assets:
      links:
        - name: 'All Platform Builds'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/download?job=package'
          link_type: 'package'
  rules:
    - if: $CI_COMMIT_TAG