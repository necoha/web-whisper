name: Windows Release

on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.11"
  RUST_BACKTRACE: 1

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Setup pnpm via packageManager field
      working-directory: frontend
      run: corepack use pnpm
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          frontend/src-tauri/target
          ~/.pnpm-store
          ~\AppData\Local\pip\Cache
        key: windows-release-${{ hashFiles('frontend/src-tauri/Cargo.lock', 'frontend/pnpm-lock.yaml', 'backend/requirements.txt') }}
        restore-keys: |
          windows-release-
          
    - name: Install Python dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build backend executable
      working-directory: backend
      run: |
        pyinstaller main.py --onefile --name whisper-gui-core.exe `
          --collect-all faster_whisper `
          --collect-all ctranslate2 `
          --collect-all gradio `
          --collect-all gradio_client `
          --collect-data safehttpx `
          --collect-data gradio_client `
          --collect-data groovy `
          --add-data "configs;configs" `
          --add-data "scripts;scripts" `
          --hidden-import=mlx_whisper `
          --hidden-import=faster_whisper `
          --hidden-import=ctranslate2 `
          --hidden-import=gradio `
          --hidden-import=safehttpx `
          --console
          
    - name: Install frontend dependencies
      working-directory: frontend
      run: pnpm install --frozen-lockfile
      
    - name: Generate Tauri icons
      working-directory: frontend
      run: pnpm tauri icon src-tauri/icons/icon.png
      
    - name: Build Tauri application
      working-directory: frontend
      run: pnpm tauri build --target x86_64-pc-windows-msvc
      
    - name: Create Windows release artifacts
      run: |
        $ErrorActionPreference = "Stop"
        
        # Create output directory (force recreate for idempotency)
        New-Item -ItemType Directory -Path releases -Force | Out-Null
        
        # --- Portable standalone EXE ---
        $appDir = "frontend\src-tauri\target\x86_64-pc-windows-msvc\release"
        $portable = $null
        # Try common Tauri binary names
        $portable = Get-ChildItem $appDir -Filter "Web Whisper.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
        if (-not $portable) {
          $portable = Get-ChildItem $appDir -Filter "web-whisper.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
        }
        if (-not $portable) {
          # Fallback: any exe that matches web whisper naming (case-insensitive)
          $portable = Get-ChildItem $appDir -Filter *.exe -ErrorAction SilentlyContinue |
            Where-Object { $_.Name -match '^(?i)web([ -])?whisper(.*)\.exe$' } |
            Select-Object -First 1
        }
        if ($portable) {
          Copy-Item $portable.FullName "releases\web-whisper-portable.exe" -Force
          Write-Host "Packaged portable EXE: $($portable.Name)"
        } else {
          Write-Host "No portable EXE found in $appDir"
        }
        
        # --- MSI installer ---
        $msiDir = "frontend\src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi"
        $msi = Get-ChildItem $msiDir -Filter *.msi -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($msi) {
          Copy-Item $msi.FullName "releases\web-whisper-windows-x64.msi" -Force
          Write-Host "Packaged MSI: $($msi.Name)"
        } else {
          Write-Host "No MSI found in $msiDir"
        }
        
        # --- NSIS installer (EXE) ---
        $nsisDir = "frontend\src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis"
        $nsis = Get-ChildItem $nsisDir -Filter *.exe -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($nsis) {
          Copy-Item $nsis.FullName "releases\web-whisper-windows-x64-installer.exe" -Force
          Write-Host "Packaged NSIS: $($nsis.Name)"
        } else {
          Write-Host "No NSIS EXE found in $nsisDir"
        }
        
        # --- Backend executable ---
        $backendExe = "backend\dist\whisper-gui-core.exe"
        if (Test-Path $backendExe) {
          Copy-Item $backendExe "releases\whisper-gui-core.exe" -Force
          Write-Host "Packaged backend: whisper-gui-core.exe"
        } else {
          Write-Host "Backend EXE not found at $backendExe"
        }
        
        Write-Host "`nCreated Windows release artifacts:"
        Get-ChildItem releases\

    - name: Ensure 7-Zip available
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        if (-not (Get-Command 7z -ErrorAction SilentlyContinue)) {
          Write-Host "7z not found. Installing via choco..."
          choco install 7zip -y --no-progress
        } else {
          Write-Host "7z is available."
        }

    - name: Build single-file onefile Lite (SFX)
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        # Staging directory
        New-Item -ItemType Directory -Path onefile -Force | Out-Null
        Copy-Item releases\web-whisper-portable.exe onefile\ -Force
        Copy-Item releases\whisper-gui-core.exe onefile\ -Force

        # PowerShell launcher for Lite (downloads deps on first run)
        $launcherPs1 = @'
Param()
$ErrorActionPreference = "Stop"
try { [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 } catch {}

$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$BinDir = Join-Path $env:LOCALAPPDATA 'WebWhisper\bin'
New-Item -ItemType Directory -Path $BinDir -Force | Out-Null

# Ensure ffmpeg
$FfmpegPath = Join-Path $BinDir 'ffmpeg.exe'
if (-not (Test-Path $FfmpegPath)) {
  Write-Host 'Downloading ffmpeg (first run only)...'
  $ffUrl = 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip'
  $tmpZip = Join-Path $env:TEMP ('ffmpeg_' + [Guid]::NewGuid().ToString() + '.zip')
  Invoke-WebRequest -Uri $ffUrl -OutFile $tmpZip -UseBasicParsing
  $tmpDir = Join-Path $env:TEMP ('ffmpeg_' + [Guid]::NewGuid().ToString())
  New-Item -ItemType Directory -Path $tmpDir -Force | Out-Null
  Expand-Archive -Path $tmpZip -DestinationPath $tmpDir -Force
  $ffExe = Get-ChildItem -Path $tmpDir -Recurse -Filter ffmpeg.exe | Select-Object -First 1
  if (-not $ffExe) { throw 'ffmpeg.exe not found in downloaded archive' }
  Copy-Item $ffExe.FullName $FfmpegPath -Force
}

# Ensure WebView2 via bootstrapper
$Bootstrapper = Join-Path $ScriptDir 'MicrosoftEdgeWebView2RuntimeInstallerX64.exe'
if (-not (Test-Path $Bootstrapper)) {
  try { Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile $Bootstrapper -UseBasicParsing } catch { Write-Warning 'Failed to download WebView2 bootstrapper.' }
}
if (Test-Path $Bootstrapper) {
  Start-Process -FilePath $Bootstrapper -ArgumentList '/silent','/install' -Wait -NoNewWindow
}

# Prepend bin to PATH and launch
$env:PATH = "$BinDir;" + $env:PATH
Start-Process -FilePath (Join-Path $ScriptDir 'web-whisper-portable.exe') -WorkingDirectory $ScriptDir
'@
        Set-Content -Path onefile\run.ps1 -Value $launcherPs1 -Encoding UTF8

        # SFX config for 7-Zip (Lite)
        $sfxCfg = @'
;!@Install@!UTF-8!
Title="Web Whisper (Onefile Lite)"
RunProgram="powershell -NoProfile -ExecutionPolicy Bypass -File run.ps1"
;!@InstallEnd@!
'@
        Set-Content -Path config.txt -Value $sfxCfg -Encoding UTF8
        
        # Create 7z archive of staging
        & 7z a -t7z -mx=9 onefile.7z .\onefile\* | Out-Null
        
        # Find 7z SFX module
        $sfx = "$Env:ProgramFiles\7-Zip\7zsd.sfx"
        if (-not (Test-Path $sfx)) { $sfx = "$Env:ProgramFiles(x86)\7-Zip\7zsd.sfx" }
        if (-not (Test-Path $sfx)) { Write-Host "7z SFX module not found"; exit 1 }
        
        # Build final single-file EXE by concatenation (Lite)
        cmd /c copy /b "$sfx"+"config.txt"+"onefile.7z" "releases\web-whisper-onefile-lite.exe" > nul

        Write-Host "Created onefile (Lite): releases\\web-whisper-onefile-lite.exe"
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release
        path: releases/
        retention-days: 7

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-release
        path: releases/
        
    - name: List all artifacts
      run: |
        echo "Available release artifacts:"
        ls -la releases/
        file releases/* || true
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Web Whisper ${{ steps.version.outputs.version }}
        files: releases/*
        generate_release_notes: true
        body: |
          ## Web Whisper ${{ steps.version.outputs.version }}
          
          🎤 Windows speech-to-text application powered by OpenAI Whisper AI with GPU acceleration.
          
          ### 🚀 Features
          - **Windows NVIDIA CUDA**: GPU acceleration for compatible graphics cards
          - **Intel GPU Compatible**: Works with Intel IRIS Graphics (CPU processing)  
          - **Portable Version**: No installation required - single EXE file
          - **Smart File Saving**: Automatic text export with error recovery
          - **Drag & Drop Interface**: Simple audio file processing
          - **High Accuracy**: Whisper Large-v3 model for superior transcription
          - **Multiple Formats**: MP3, WAV, M4A, FLAC, MP4, AVI, MOV, MKV support
          
          ### 📦 Downloads
          
          **Windows (64-bit):**
          - `web-whisper-onefile-lite.exe` - 🔻 Onefile Lite (first run downloads deps)
          - `web-whisper-portable.exe` - 🚀 **Portable standalone EXE** (No installation required)
          - `web-whisper-windows-x64.msi` - MSI installer
          - `web-whisper-windows-x64-installer.exe` - Alternative EXE installer  
          - `whisper-gui-core.exe` - Backend executable only
          
          ### 🛠 Installation
          
          **Windows:**
          
          **Option 1: Portable (Recommended for first-time users)**
          1. Download `web-whisper-portable.exe`
          2. Save to any folder (Desktop, Downloads, etc.)
          3. Double-click to run - no installation required!
          
          **Option 2: Traditional Installation**
          1. Download either the MSI or EXE installer  
          2. Run the installer and follow the prompts
          3. Launch "Web Whisper" from the Start Menu
          
          ### ⚡ Performance
          - GPU acceleration automatically detected and enabled
          - Offline processing - no internet required after setup
          - Optimized for Windows x64 architecture with CUDA support
          
          ### 📋 System Requirements
          
          **Windows:**
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum, 8GB recommended
          - NVIDIA GPU with CUDA support (optional, for acceleration)
          - ~2GB free disk space for models
          
          Built with ❤️ using Tauri, Rust, TypeScript, and Python.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
